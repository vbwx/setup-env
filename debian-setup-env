#!/bin/bash

# Change the install location if necessary:
prefix=/usr/local

#{{{ Initialization

	set +o histexpand -o errexit -o nounset
	shopt -s extglob

	dist="$(lsb_release -c | cut -f 2)"
	setup="$(dirname "$0")/debian"
	cfg="$HOME/.config/dotfiles"

	export TMPDIR="${TMPDIR:-/tmp}"
	export RBENV_ROOT="$prefix/rbenv"
	export PYENV_ROOT="$prefix/pyenv"
	export NVM_DIR="$prefix/nvm"
	export PERLBREW_ROOT="$prefix/perlbrew"

	echo "PATH = $PATH"
	[[ ${PATH#*$prefix/bin} = "$PATH" ]] && export PATH="$prefix/bin:$PATH"
	[ -d "$prefix/bin" ] || makedir "$prefix/bin"

#}}}

#{{{ Functions

	die() {
		>&2 echo -e "\n$*!"
		exit 1
	}

	diecmd() {
		>&2 echo -e "\nCommand not found: $1"
		>&2 echo "Open a new shell and run this script again to continue with the setup."
		exit 127
	}

	warn() {
		>&2 echo -e "\n$*!\n"
	}

	exist() {
		type "$1" &> /dev/null
	}

	islocal() {
		bin="$(type -P "$1" 2> /dev/null)"
		exist "$1" && test "${bin#*$prefix}" != "$bin"
	}

#	inshare() {
#		test -e "/usr/share/$1" || test -e "$prefix/share/$1"
#	}

	inhome() {
		test -e "$HOME/$1"
	}

	inlists() {
		grep -qi "$1" /etc/apt/sources.list /etc/apt/sources.list.d/*
	}

	install() {
		apt-get -y install "$@"
	}

	rundel() {
		if [ -d "$1" ]; then
			dir="$1"
			shift
			(
				cd "$dir"
				[ -f "$2" -o -f "$3" ] && "$@" && \
					cd .. && rm -rvf "$dir"
			) || die "Can't install $(basename "$dir")"
		else
			[ -f "$2" ] && file="$2" || file="$3"
			([ -f "$file" ] && "$@" && rm -vf "$file") || \
				die "Can't install $(basename "$file")"
		fi
	}

	clone() {
		[ -e "${@:(-1)}" ] || git clone "$@" || warn "Can't clone" "${@:(-2):1}"
	}

	download() {
		echo "$1"
		if [ $# -eq 1 ]; then
			curl -fsSL "$1" || warn "Can't download $1"
		else
			[ -e "$2" ] || curl --create-dirs -fsSLo "$2" "$1" || warn "Can't download $1"
		fi
	}

	modify() {
		sed -i -re "$1" "$2" || warn "Can't modify $2"
	}

	copy() {
		cp -vf "$@" || exit 1
	}

	link() {
		ln -vs "$@" || exit 1
	}

	makedir() {
		mkdir -vp "$@" || exit 1
	}

#}}}

#{{{ Check for root access

# [ -w ... ]

#}}}

#{{{ Dotfiles

	echo ">> Dotfiles"

	if [ ! -d "$cfg" ]; then
		clone https://github.com/vbwx/dotfiles.git "$cfg"
		bash "$cfg/install"
	fi

#}}}

#{{{ Packages

exist ag               || brew install the_silver_searcher
exist automake         || brew install automake
poured bash-completion || brew install bash-completion
tapped caskroom        || brew tap     caskroom/cask
exist cmake            || brew install cmake
exist colordiff        || brew install colordiff
poured coreutils       || brew install coreutils
exist cowsay           || brew install cowsay
exist cscope           || brew install cscope
islocal ctags          || brew install ctags
exist fdupes           || brew install fdupes
exist ffmpeg           || brew install ffmpeg
exist fortune          || brew install fortune
exist fzf              || brew install fzf
islocal git            || brew install git
exist git-flow         || brew install git-flow
islocal gzip           || brew install homebrew/dupes/gzip
islocal less           || brew install homebrew/dupes/less
exist lua              || brew install lua
islocal rsync          || brew install homebrew/dupes/rsync
exist php-cs-fixer     || brew install homebrew/php/php-cs-fixer
islocal php            || brew install homebrew/php/php70
poured libvo-aacenc    || brew install libvo-aacenc
poured libyaml         || brew install libyaml
poured msgpack         || brew install msgpack
exist pyenv            || brew install pyenv
exist rbenv            || brew install rbenv
poured readline        || brew install readline
islocal svn            || brew install subversion
exist tig              || brew install tig
exist tree             || brew install tree
exist wdiff            || brew install wdiff
exist xz               || brew install xz

#}}}

#{{{ Casks

inapps "AppCleaner"                          || brew cask install appcleaner
inapps "Dropbox"                             || brew cask install dropbox
inapps "Firefox"                             || brew cask install firefox
inapps "GitHub Desktop"                      || brew cask install github-desktop
inapps "Google Chrome"                       || brew cask install google-chrome
inapps "HandBrake"                           || brew cask install handbrake
inapps "MacVim"                              || brew cask install macvim
inapps "MAMP/MAMP"                           || brew cask install mamp
inapps "Platypus"                            || brew cask install platypus
inapps "Skim"                                || brew cask install skim
inapps "Skype"                               || brew cask install skype
inapps "Suspicious Package"                  || brew cask install suspicious-package
inapps "TeamViewer"                          || brew cask install teamviewer
inapps "Things"                              || brew cask install things
inapps "Transmission"                        || brew cask install transmission
inapps "Transmit"                            || brew cask install transmit
inapps "VLC"                                 || brew cask install vlc

#}}}

#{{{ Apt

	#{{{ Repositories

	echo ">> APT repositories"

	exist apt-get || diecmd apt

	if ! inlists download.virtualbox.org; then
		echo "deb http://download.virtualbox.org/virtualbox/debian $dist contrib" \
			>> /etc/apt/sources.list.d/oracle.list
		download https://www.virtualbox.org/download/oracle_vbox_2016.asc | apt-key add - || warn "Can't add public key oracle_vbox_2016.asc"
		download https://www.virtualbox.org/download/oracle_vbox.asc | apt-key add - || warn "Can't add public key oracle_vbox.asc"
	fi

	inlists rabbitvcs || add-apt-repository ppa:rabbitvcs/ppa
	inlists universe || add-apt-repository universe
	inlists zeal-developers || add-apt-repository ppa:zeal-developers/ppa

	#}}}

	#{{{ Packages

	echo ">> APT packages"

	exist 7z           || install p7zip
	exist ag           || install silversearcher-ag
	exist autoconf     || install autoconf
	exist automake     || install automake
	exist clipit       || install clipit
	exist dconf-editor || install dconf-editor
	exist dkms         || install dkms
	exist dropbox      || install dropbox
	exist gimp         || install gimp
	exist git          || install git
	exist gnome-tweak-tool || install gnome-tweak-tool
	exist gvim         || install vim-gtk
	exist java         || install default-jre
	# exist latex      || install texlive texlive-lang-german texlive-latex-extra
	# exist latexmk    || install latexmk
	exist libtoolize   || install libtool
	exist mount.exfat  || install exfat-fuse exfat-utils
	exist nitrogen     || install nitrogen
	exist rename       || install rename
	exist rabbitvcs    || install rabbitvcs-nautilus rabbitvcs-cli
	exist shellcheck   || install shellcheck
	exist svn          || install subversion
	exist tree         || install tree
	exist virtualbox   || install virtualbox-5.1
	exist zeal         || install zeal
	exist zsh          || install zsh

	if ! exist google-chrome; then
		download https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb "$TMPDIR/google-chrome.deb"
		rundel dpkg -i "$TMPDIR/google-chrome.deb"
	fi

	install -f

	#}}}
#}}}

#{{{ Shared files

	echo ">> Shared files"

	download "http://www.unicode.org/Public/UNIDATA/UnicodeData.txt" "$prefix/share/unicode/UnicodeData.txt"

#}}}

#{{{ Node.js

	echo ">> Node.js"

	if [ ! -f "$NVM_DIR/nvm.sh" ]; then
		clone https://github.com/creationix/nvm.git $NVM_DIR && (
			cd $NVM_DIR
			git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" origin)" || die "Can't install nvm"
		)
	fi
	exist nvm || source "$NVM_DIR/nvm.sh" || diecmd nvm

	if ! islocal node; then
		nvm install node || die "Can't install Node"
	fi
	[ -e $prefix/node ] || link "$NVM_DIR/versions/node/$(nvm current)" $prefix/node

	#{{{ Packages

	echo ">> Node packages"

	exist npm                || diecmd npm
	exist coffee             || npm install -g coffee-script
	exist coffeelint         || npm install -g coffeelint
	exist commitizen         || npm install -g commitizen
	exist eslint             || npm install -g eslint
	exist grunt              || npm install -g grunt-cli
	exist gulp               || npm install -g gulp
	exist instant-markdown-d || npm install -g instant-markdown-d
	exist js-beautify        || npm install -g js-beautify
	exist jsctags            || npm install -g jsctags
	exist marked             || npm install -g marked
	exist tsc                || npm install -g typescript
	exist yo                 || npm install -g yo

	#}}}
#}}}

#{{{ Ruby

	echo ">> Ruby"

	exist rbenv || diecmd rbenv
	eval "$(rbenv init -)"

	if ! islocal ruby; then
		ver="$(rbenv install --list | sort -nr | perl -ne 'next unless /^\s*\d+\.\d+(\.\d+)?\n$/; s/\s//g; print; exit;')"
		[ "$ver" ] || die "Can't fetch latest Ruby version"
		rbenv install "$ver" || die "Can't install Ruby"
		rbenv global "$ver"
	fi

	#{{{ Gems

	echo ">> Ruby gems"

	exist gem       || diecmd gem
	islocal gem     || die "rbenv doesn't seem to be active"
	exist compass   || gem install -N compass
	exist sass      || gem install -N sass sass-globbing
	exist scss-lint || gem install -N scss_lint

	#}}}
#}}}

#{{{ Perl

	echo ">> Perl"

	if ! exist perlbrew; then
		download https://install.perlbrew.pl "$TMPDIR/perlbrew.sh"
		rundel bash "$TMPDIR/perlbrew.sh"
	fi
	exist perlbrew || source "$PERLBREW_ROOT/etc/bashrc" || diecmd perlbrew


	if ! islocal perl; then
		perlbrew install -n stable || die "Can't install Perl"
		ver="$(perlbrew list | perl -ne '/perl-[\d.]+/; print $&; $& and exit;')"
		[ "$ver" ] || die "Can't find out installed Perl version"
		perlbrew alias create perl-"$ver" default && perlbrew switch default
	fi

	#{{{ Modules

	echo ">> Perl modules"

	exist cpan   || diecmd cpan
	islocal cpan || die "perlbrew doesn't seem to be active"

	#}}}
#}}}

#{{{ Python

	echo ">> Python"

	exist pyenv || diecmd pyenv
	eval "$(pyenv init -)"

	if ! islocal python; then
		ver="$(pyenv install --list | sort -nr | perl -ne 'next unless /^\s*\d+\.\d+(\.\d+)?\n$/; s/\s//g; print; exit;')"
		[ "$ver" ] || die "Can't fetch latest Python version"
		CFLAGS="-I$(xcrun --show-sdk-path)/usr/include" pyenv install "$ver" || die "Can't install Python"
		pyenv global "$ver"
	fi

#}}}

#{{{ PHP

	echo ">> PHP"

	if ! exist composer; then
		download "https://getcomposer.org/installer" "$TMPDIR/composer.php"
		rundel php "$TMPDIR/composer.php" --install-dir=$prefix/bin --filename=composer
	fi

#}}}

#{{{ Vim

	echo ">> Vim"

	[ -f "$setup/vim" ] || die "Can't find vim script"

	islocal vim      || copy "$setup/vim" $prefix/bin
	islocal vi       || link $prefix/bin/vim $prefix/bin/vi
	islocal gvim     || link $prefix/bin/vim $prefix/bin/gvim
	islocal rvim     || link $prefix/bin/vim $prefix/bin/rvim
	islocal rgvim    || link $prefix/bin/vim $prefix/bin/rgvim
	islocal view     || link $prefix/bin/vim $prefix/bin/view
	islocal gview    || link $prefix/bin/vim $prefix/bin/gview
	islocal vimdiff  || link $prefix/bin/vim $prefix/bin/vimdiff
	islocal gvimdiff || link $prefix/bin/vim $prefix/bin/gvimdiff
	islocal viman    || link $prefix/bin/vim $prefix/bin/viman
	islocal gviman   || link $prefix/bin/vim $prefix/bin/gviman

	islocal vim || diecmd vim

	download http://ftp.vim.org/pub/vim/runtime/spell/de.utf-8.spl "$HOME/.vim/spell/de.utf-8.spl"
	download https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim "$HOME/.vim/autoload/plug.vim"

	if ! inhome .vim/plugged; then
		vim -c PlugInstall -c q
	fi

#}}}

#{{{ Prezto

	echo ">> Prezto"

	clone --recursive https://github.com/vbwx/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
	if [ ! -L "${ZDOTDIR:-$HOME}/.zpreztorc" ]; then
		for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/!(README.md); do
			link "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
		done
	fi

	echo "SHELL = $SHELL"
	[[ $SHELL = "/bin/zsh" ]] || chsh -s /bin/zsh
	touch "$HOME/.hushlogin"

#}}}

#{{{ Base16

	echo ">> Base16"

	_base16() {
		for s in color-scripts/*-256.sh; do
			echo "${s/color-scripts\//}"
			sed -i -e "s/\"base 16 /\"/i" -e "s/ 256\"/\"/" "$s"
			bash "$s"
		done
	}

	if ! dconf dump /org/gnome/terminal/legacy/profiles:/ | grep -qi harmonic16; then
		clone https://github.com/aaron-williamson/base16-gnome-terminal.git "$TMPDIR/base16-terminal"
		rundel "$TMPDIR/base16-terminal" _base16
	fi

#}}}

#{{{ Powerline fonts

	echo ">> Powerline fonts"

	if ! inhome .local/share/fonts/Hack-Regular.ttf; then
		clone https://github.com/powerline/fonts.git "$TMPDIR/powerline-fonts"
		rundel "$TMPDIR/powerline-fonts" bash install.sh
	fi

#}}}

#{{{ Distribution-specific setup

	#{{{ Keyboard configuration

	echo ">> Keyboard configuration"

	# Map [Shift]+[Backspace] to [Delete]
	for file in pc inet us macintosh_vndr/apple macintosh_vndr/us; do
		modify "s/backspace,[[:space:]]*backspace/BackSpace, Delete/ig" /usr/share/X11/xkb/symbols/$file
	done

	gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us+mac'), ('xkb', 'de')]"
	gsettings set org.gnome.desktop.input-sources xkb-options "['lv3:ralt_switch', 'ctrl:swap_lwin_lctl', 'ctrl:swap_rwin_rctl', 'terminate:ctrl_alt_bksp']"

	#}}}

	#{{{ Startup applications

	echo ">> Startup applications"

	if ! inhome .config/autostart/mouse-speed.desktop; then
		[ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"
		xinput --list --short
		echo -n "IDs of your pointing devices (space-separated): "
		read ids
		file="$setup/mouse-speed"
		modify "s/\$ids/$ids/" "$file"
		copy "$file" "$HOME/.local/bin"
		file="$setup/mouse-speed.desktop"
		modify "s/~\\//$HOME\\//" "$file"
		copy "$file" "$HOME/.config/autostart"
	fi
	if ! inhome .config/autostart/nitrogen.desktop; then
		exist nitrogen || diecmd nitrogen
		copy "$setup/nitrogen.desktop" "$HOME/.config/autostart"
		nitrogen &> /dev/null &
	fi

	#}}}

	#{{{ Modify application shortcuts

	echo ">> Modify application shortcuts"

	file="/usr/share/applications/google-chrome.desktop"
	modify "s/google-chrome[[:alnum:]\\-]*/& --enable-native-gpu-memory-buffers/g" $file

	#}}}
#}}}

#{{{ Set PATH for all apps

	echo ">> Set PATH for all apps"

	lpaths=(
		$prefix/bin
		$prefix/sbin
		$prefix/perlbrew/perls/default/bin
		$prefix/pyenv/shims
		$prefix/rbenv/shims
		$prefix/node/bin
	)
	texpaths=(
		/Library/TeX/texbin
	)
	guipath="$(launchctl getenv PATH)"
	echo "GUI PATH = $guipath"

	if [ "${guipath#*$prefix/bin}" = "$guipath" ]; then
		echo "New GUI PATH:"
		guipath="$(IFS=: ; printf "${lpaths[*]}:${texpaths[*]}"):$guipath"
		echo "$guipath"
		sudo launchctl config user path "$guipath"
	fi
	if [[ $(head -n 1 /etc/paths) != "$prefix/bin" ]]; then
		(IFS=$'\n'; printf "${lpaths[*]}\n" > "$TMPDIR/paths")
		cat /etc/paths >> "$TMPDIR/paths"
		echo "New /etc/paths:"
		cat "$TMPDIR/paths"
		sudo mv -v -f "$TMPDIR/paths" /etc || exit 1
	fi
	if [ ! -e /etc/paths.d/TeX ]; then
		echo "$(IFS=$'\n'; printf "${texpaths[*]}")\n" | sudo tee /etc/paths.d/TeX > /dev/null
	fi


#}}}

echo ">> Done"

# vim: fdm=marker:fdl=0:fdc=3
