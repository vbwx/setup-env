#!/bin/bash

# Change the install location if necessary:
prefix=/usr/local

#{{{ Initialization

	set +o histexpand -o errexit -o nounset
	shopt -s extglob

	setup="$(dirname "$0")/mac"
	cfg="$HOME/.config/dotfiles"

	export TMPDIR="${TMPDIR:-/private/tmp}"
	export RBENV_ROOT="$prefix/rbenv"
	export PYENV_ROOT="$prefix/pyenv"
	export NVM_DIR="$prefix/nvm"
	export PERLBREW_ROOT="$prefix/perlbrew"

	echo "PATH = $PATH"
	[[ ${PATH#*$prefix/bin} = "$PATH" ]] && export PATH="$prefix/bin:$PATH"

#}}}

#{{{ Functions

	die() {
		>&2 echo -e "\n$*!"
		exit 1
	}

	diecmd() {
		>&2 echo -e "\nCommand not found: $1"
		>&2 echo "Open a new shell and run this script again to continue with the setup."
		exit 127
	}

	warn() {
		>&2 echo -e "\n$*!\n"
	}

	exist() {
		type -t "$1" &> /dev/null
	}

	islocal() {
		bin="$(type -P "$1" 2> /dev/null)"
		exist "$1" && test "${bin#*$prefix}" != "$bin"
	}

	poured() {
		test -d "$prefix/Cellar/$1"
	}

	tapped() {
		test -d "$prefix/Library/Taps/$1"
	}

	inlibs() {
		test -e "/Library/$1" -o -e "$HOME/Library/$1"
	}

	inapps() {
		test -e "/Applications/$1.app" -o -e "$HOME/Applications/$1.app"
	}

	inhome() {
		test -e "$HOME/$1"
	}

	install() {
		brew install "$@"
	}

	installc() {
		brew cask install "$@"
	}

	rundel() {
		if [ -d "$1" ]; then
			dir="$1"
			shift
			(
				cd "$dir"
				[ -f "$2" -o -f "$3" ] && "$@" && \
					cd .. && rm -rvf "$dir"
			) || die "Can't install $(basename "$dir")"
		else
			[ -f "$2" ] && file="$2" || file="$3"
			([ -f "$file" ] && "$@" && rm -vf "$file") || \
				die "Can't install $(basename "$file")"
		fi
	}

	clone() {
		[ -e "${@:(-1)}" ] || git clone "$@" || warn "Can't clone" "${@:(-2):1}"
	}

	download() {
		if [ $# -eq 1 ]; then
			curl -fsSL "$1" || warn "Can't download $1"
		else
			[ -e "$2" ] || curl --create-dirs -fsSLo "$2" "$1" || warn "Can't download $1"
		fi
	}

	copy() {
		makedir "${@:(-1)}"
		[ -e "${@:(-1)}/$(basename "$1")" ] || cp -Rvf "$@" || exit 1
	}

	link() {
		ln -vs "$@" || exit 1
	}

	makedir() {
		[ -d "$1" ] || mkdir -vp "$@" || exit 1
	}


#}}}

#{{{ Dotfiles

	echo ">> Dotfiles"

	if [ ! -d "$cfg" ]; then
		clone https://github.com/vbwx/dotfiles.git "$cfg"
		bash "$cfg/install"
	fi

#}}}

#{{{ Xcode

	echo ">> Xcode"

	exist xcode-select || diecmd xcode-select
	exist xcodebuild   || xcode-select --install

#}}}

#{{{ Homebrew

	echo ">> Homebrew"

	if ! exist brew; then
		download https://raw.githubusercontent.com/Homebrew/install/master/install "$TMPDIR/homebrew.rb"
		rundel /usr/bin/ruby "$TMPDIR/homebrew.rb"
	fi

	tapped caskroom || brew tap caskroom/cask

	#{{{ Packages

	echo ">> Homebrew packages"

	exist 7z               || install p7zip
	exist ag               || install the_silver_searcher
	exist automake         || install automake
	poured bash-completion || install bash-completion
	exist cmake            || install cmake
	exist colordiff        || install colordiff
	poured coreutils       || install coreutils
	exist cowsay           || install cowsay
	exist cscope           || install cscope
	islocal ctags          || install ctags
	exist fdupes           || install fdupes
	exist ffmpeg           || install ffmpeg
	exist fortune          || install fortune
	exist fzf              || install fzf
	islocal git            || install git
	exist git-flow         || install git-flow
	islocal gzip           || install homebrew/dupes/gzip
	islocal less           || install homebrew/dupes/less
	exist glibtoolize      || install libtool
	poured libvo-aacenc    || install libvo-aacenc
	poured libyaml         || install libyaml
	exist lua              || install lua
	poured msgpack         || install msgpack
	islocal php            || install homebrew/php/php70
	exist php-cs-fixer     || install homebrew/php/php-cs-fixer
	exist pyenv            || install pyenv
	exist rbenv            || install rbenv
	poured readline        || install readline
	exist rename           || install rename
	islocal rsync          || install homebrew/dupes/rsync
	exist shellcheck       || install shellcheck
	islocal svn            || install subversion
	exist tig              || install tig
	exist tree             || install tree
	exist wdiff            || install wdiff
	exist xz               || install xz

	[[ $(type -P python) = "$prefix/bin/python" ]] && brew unlink python

	#}}}

	#{{{ Casks

	echo ">> Homebrew casks"

	exist  java                                || installc java
	exist  tex                                 || installc mactex
	inapps AppCleaner                          || installc appcleaner
	inapps Dropbox                             || installc dropbox
	inapps Firefox                             || installc firefox
	inapps GitHub\ Desktop                     || installc github-desktop
	inapps Google\ Chrome                      || installc google-chrome
	inapps HandBrake                           || installc handbrake
	inapps MacVim                              || installc macvim
	inapps MAMP/MAMP                           || installc mamp
	inapps Platypus                            || installc platypus
	inapps Skim                                || installc skim
	inapps Skype                               || installc skype
	inapps Suspicious\ Package                 || installc suspicious-package
	inapps TeamViewer                          || installc teamviewer
	inapps Things                              || installc things
	inapps Transmission                        || installc transmission
	inapps Transmit                            || installc transmit
	inapps VirtualBox                          || installc virtualbox
	inapps VLC                                 || installc vlc
	inlibs QuickLook/QLColorCode.qlgenerator   || installc qlcolorcode
	inlibs QuickLook/QLMarkdown.qlgenerator    || installc qlmarkdown
	inlibs QuickLook/QuickLookCSV.qlgenerator  || installc quicklook-csv
	inlibs QuickLook/QuickLookJSON.qlgenerator || installc quicklook-json
	inlibs QuickLook/WebP.qlgenerator          || installc webpquicklook

	#}}}
#}}}

#{{{ Shared files

	echo ">> Shared files"

	download "http://www.unicode.org/Public/UNIDATA/UnicodeData.txt" "$prefix/share/unicode/UnicodeData.txt"

#}}}

#{{{ Node.js

	echo ">> Node.js"

	if [ ! -f "$NVM_DIR/nvm.sh" ]; then
		clone https://github.com/creationix/nvm.git $NVM_DIR && (
			cd $NVM_DIR
			git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" origin)" || die "Can't install nvm"
		)
	fi
	exist nvm || source "$NVM_DIR/nvm.sh" || diecmd nvm

	if ! islocal node; then
		nvm install node || die "Can't install Node"
	fi
	[ -e $prefix/node ] || link "$NVM_DIR/versions/node/$(nvm current)" $prefix/node

	#{{{ Packages

	echo ">> Node packages"

	exist npm                || diecmd npm
	exist coffee             || npm install -g coffee-script
	exist coffeelint         || npm install -g coffeelint
	exist commitizen         || npm install -g commitizen
	exist eslint             || npm install -g eslint
	exist grunt              || npm install -g grunt-cli
	exist gulp               || npm install -g gulp
	exist instant-markdown-d || npm install -g instant-markdown-d
	exist js-beautify        || npm install -g js-beautify
	exist jsctags            || npm install -g jsctags
	exist marked             || npm install -g marked
	exist tsc                || npm install -g typescript
	exist yo                 || npm install -g yo

	#}}}
#}}}

#{{{ Ruby

	echo ">> Ruby"

	exist rbenv || diecmd rbenv
	eval "$(rbenv init -)"

	if ! islocal ruby; then
		ver="$(rbenv install --list | sort -nr | perl -ne 'next unless /^\s*\d+\.\d+(\.\d+)?\n$/; s/\s//g; print; exit;')"
		[ "$ver" ] || die "Can't fetch latest Ruby version"
		rbenv install "$ver" || die "Can't install Ruby"
		rbenv global "$ver"
	fi

	#{{{ Gems

	echo ">> Ruby gems"

	exist gem       || diecmd gem
	islocal gem     || die "rbenv doesn't seem to be active"
	exist compass   || gem install -N compass
	exist sass      || gem install -N sass sass-globbing
	exist scss-lint || gem install -N scss_lint

	#}}}
#}}}

#{{{ Perl

	echo ">> Perl"

	if ! exist perlbrew; then
		download https://install.perlbrew.pl "$TMPDIR/perlbrew.sh"
		rundel bash "$TMPDIR/perlbrew.sh"
	fi
	exist perlbrew || source "$PERLBREW_ROOT/etc/bashrc" || diecmd perlbrew


	if ! islocal perl; then
		perlbrew install -n stable || die "Can't install Perl"
		ver="$(perlbrew list | perl -ne '/perl-[\d.]+/; print $&; $& and exit;')"
		[ "$ver" ] || die "Can't find out installed Perl version"
		perlbrew alias create "perl-$ver" default && perlbrew switch default
	fi

	#{{{ Modules

	echo ">> Perl modules"

	exist cpan   || diecmd cpan
	islocal cpan || die "perlbrew doesn't seem to be active"

	#}}}
#}}}

#{{{ Python

	echo ">> Python"

	exist pyenv || diecmd pyenv
	eval "$(pyenv init -)"

	if ! islocal python; then
		ver="$(pyenv install --list | sort -nr | perl -ne 'next unless /^\s*\d+\.\d+(\.\d+)?\n$/; s/\s//g; print; exit;')"
		[ "$ver" ] || die "Can't fetch latest Python version"
		CFLAGS="-I$(xcrun --show-sdk-path)/usr/include" pyenv install "$ver" || die "Can't install Python"
		pyenv global "$ver"
	fi

#}}}

#{{{ PHP

	echo ">> PHP"

	if ! exist composer; then
		download "https://getcomposer.org/installer" "$TMPDIR/composer.php"
		rundel php "$TMPDIR/composer.php" --install-dir=$prefix/bin --filename=composer
	fi

#}}}

#{{{ Vim

	echo ">> Vim"

	[ -r "$setup/mvim" ] || die "Can't find mvim script"
	diff "$setup/mvim" $prefix/bin/mvim &> /dev/null || copy "$setup/mvim" $prefix/bin

	islocal vi       || link $prefix/bin/mvim $prefix/bin/vi
	islocal vim      || link $prefix/bin/mvim $prefix/bin/vim
	islocal gvim     || link $prefix/bin/mvim $prefix/bin/gvim
	islocal rvim     || link $prefix/bin/mvim $prefix/bin/rvim
	islocal rmvim    || link $prefix/bin/mvim $prefix/bin/rmvim
	islocal rgvim    || link $prefix/bin/mvim $prefix/bin/rgvim
	islocal view     || link $prefix/bin/mvim $prefix/bin/view
	islocal gview    || link $prefix/bin/mvim $prefix/bin/gview
	islocal mview    || link $prefix/bin/mvim $prefix/bin/mview
	islocal vimdiff  || link $prefix/bin/mvim $prefix/bin/vimdiff
	islocal gvimdiff || link $prefix/bin/mvim $prefix/bin/gvimdiff
	islocal mvimdiff || link $prefix/bin/mvim $prefix/bin/mvimdiff
	islocal viman    || link $prefix/bin/mvim $prefix/bin/viman
	islocal mviman   || link $prefix/bin/mvim $prefix/bin/mviman
	islocal gviman   || link $prefix/bin/mvim $prefix/bin/gviman

	islocal vim || diecmd mvim

	download http://ftp.vim.org/pub/vim/runtime/spell/de.utf-8.spl "$HOME/.vim/spell/de.utf-8.spl"
	download https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim "$HOME/.vim/autoload/plug.vim"

	if ! inhome .vim/plugged; then
		vim -c PlugInstall -c q
	fi

#}}}

#{{{ Prezto

	echo ">> Prezto"

	clone --recursive https://github.com/vbwx/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
	if [ ! -L "${ZDOTDIR:-$HOME}/.zpreztorc" ]; then
		for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/!(README.md); do
			link "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
		done
	fi

	echo "SHELL = $SHELL"
	[[ $SHELL = "/bin/zsh" ]] || chsh -s /bin/zsh
	touch "$HOME/.hushlogin"

#}}}

#{{{ Base16

	echo ">> Base16"

	_base16() {
		for p in profiles/*.terminal; do
			xattr -d com.apple.quarantine "$p"
			open "$p"
		done
	}

	if ! plutil -p "$HOME/Library/Preferences/com.apple.Terminal.plist" | grep -qi harmonic16; then
		clone https://github.com/vbwx/base16-terminal-app.git "$TMPDIR/base16-terminal"
		rundel "$TMPDIR/base16-terminal" _base16
	fi

#}}}

#{{{ Powerline fonts

	echo ">> Powerline fonts"

	if ! inhome Library/Fonts/Hack-Regular.ttf; then
		clone https://github.com/powerline/fonts.git "$TMPDIR/powerline-fonts"
		rundel "$TMPDIR/powerline-fonts" bash install.sh
	fi

#}}}

#{{{ Set PATH for all apps

	echo ">> Set PATH for all apps"

	lpaths=(
		$prefix/bin
		$prefix/sbin
		$prefix/perlbrew/perls/default/bin
		$prefix/pyenv/shims
		$prefix/rbenv/shims
		$prefix/node/bin
	)
	texpaths=(
		/Library/TeX/texbin
	)
	guipath="$(launchctl getenv PATH)"
	echo "GUI PATH = $guipath"

	if [ "${guipath#*$prefix/bin}" = "$guipath" ]; then
		echo "New GUI PATH:"
		guipath="$(IFS=: ; printf "${lpaths[*]}:${texpaths[*]}"):$guipath"
		echo "$guipath"
		sudo launchctl config user path "$guipath"
	fi
	if [[ $(head -n 1 /etc/paths) != "$prefix/bin" ]]; then
		(IFS=$'\n'; printf "${lpaths[*]}\n" > "$TMPDIR/paths")
		cat /etc/paths >> "$TMPDIR/paths"
		echo "New /etc/paths:"
		cat "$TMPDIR/paths"
		sudo mv -v -f "$TMPDIR/paths" /etc || exit 1
	fi
	if ! grep -sq "texbin" /etc/paths /etc/paths.d/*; then
		echo "$(IFS=$'\n'; printf "${texpaths[*]}")\n" | sudo tee /etc/paths.d/TeX > /dev/null
	fi

#}}}

echo ">> Done"

# vim: fdm=marker:fdl=0:fdc=3
